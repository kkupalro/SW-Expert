package TEST;

import java.io.*;
import java.util.*;

class node {
	int y; int x; boolean flag;
	node(int y, int x, boolean flag){
		this.y = y;
		this.x = x;
		this.flag = false;
	}
}

public class Main {
	static node[] n;
	static int result;
	static int C[] = new int[10];
	static int arr[] = new int[10];
	static int matrix[][] = {{0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40}, // (0)
							 {0, 13, 16, 19, 25, 30, 35, 40}, // (1)10
							 {0, 22, 24, 25, 30, 35, 40}, // (2)20
							 {0, 28, 27, 26, 25, 30, 35, 40}}; // (3)30
	static int visit[][] = new int[4][];
	static void print(int a[][]) {
		System.out.println("==================");
		for (int i = 0; i < a.length; i++) 
		{
			for (int j = 0; j < a[i].length; j++) 
			{
				System.out.print(a[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println("==================");
	}
	static void comb(int cnt, int idx) {
		C[cnt] = idx;
		if(cnt == 9)
		{
			solve();
			return;
		}
		comb(cnt + 1, 0);
		comb(cnt + 1, 1);
		comb(cnt + 1, 2);
		comb(cnt + 1, 3);
	}
	static void solve() {
		int ans = 0;
		n = new node[4];
		for(int i = 0; i < 4; i++)
		{
			visit[i] = new int[matrix[i].length];
			n[i] = new node(0, 0, false);
		}
		
		for(int i = 0; i < 10; i++)
		{
			int y = n[C[i]].y;
			int x = n[C[i]].x;
			if(n[C[i]].flag) continue;
			if(y == 0 && x == 5)
			{
				y += 1;
				x = arr[i];
			}
			else if(y == 0 && x == 10)
			{
				y += 2;
				x = arr[i];
			}
			else if(y == 0 && x == 15)
			{
				y += 3;
				x = arr[i];
			}
			else
			{
				x += arr[i];
			}
				
			if(matrix[y].length <= x) 
			{
				visit[n[C[i]].y][n[C[i]].x]--;
				n[C[i]].flag = true;
				continue;
			}
			
			if(visit[y][x] <= 0)
			{
				ans += matrix[y][x];
				visit[y][x]++;
				visit[n[C[i]].y][n[C[i]].x]--;
				n[C[i]].y = y;
				n[C[i]].x = x;
			}
		}
		result = Math.max(result, ans);
	}
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st = null;
		// 1. 입력
		st = new StringTokenizer(br.readLine(), " ");
		for(int i = 0; i < 10; i++)
		{
			arr[i] = Integer.parseInt(st.nextToken());
		}
		// 2. 조합
		for(int i = 0; i < 10; i++)
		{
			comb(0, 0);
			comb(0, 1);
			comb(0, 2);
			comb(0, 3);
		}
		bw.write(result + "\n");
		bw.flush();
		bw.close();
	}
}
